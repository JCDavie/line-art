{"version":3,"sources":["js.js"],"names":["mainCanvas","id","x","roundN","isNaN","val","Math","round","pow","decimals","e","round2","round3","toHex","value","Error","toString","valToRGBFactory","nMax","nMin","fixEdges","returnHex","returnChannels","n","n6th","n12th","min","max","range","period","PI","offset","clip","rangeAdjust","channel","sin","r","g","b","fixedColorFactory","color","_","__","slice","download","target","href","document","getElementById","toDataURL","replace","refresh","params","querySelectorAll","forEach","el","i","Thumbnail","setParams","update","toggleSidebar","classList","toggle","toggleNextBlock","listener","currentTarget","parentElement","throttle","func","wait","options","timeout","context","args","result","previous","later","leading","Date","now","apply","throttled","remaining","arguments","clearTimeout","trailing","setTimeout","cancel","loadParams","URL","window","location","searchParams","key","Number","setValue","getShareURL","baseURL","delete","Object","keys","append","param","rawValue","prompt","oldOscillators","cos","t","oscillatorsX","display","a","k","log10","abs","start","oscillatorsY","lineColors","Parameter","ids","rawValueType","events","controls","map","controlValue","random","control","addEventListener","onInput","bind","eventName","callback","data","innerText","setAttributes","SliderParameter","step","transformer","position","generateIntegers","generate1","animationController","animationStep","animationContainer","animation","isActive","isIncrementing","lastRun","fps","controller","run","querySelector","direction","animate","toggleAnimation","toggleAnimationDirection","updateAnimationStep","setAttribute","generate","addEventListeners","updateDisplay","emit","generated","ceil","chance","elapsed","requestAnimationFrame","OptionsParameter","o","option","dataset","call","checked","floor","length","BooleanParameter","Boolean","ColorParameter","Drawing","canvasID","canvas","ctx","getContext","radius","width","height","offsetPoint","useImageData","imageData","createImageData","event","layerX","y","layerY","pixel","getImageData","rgba1","console","log","index","increment","xScale","yScale","getPixelColor","drawPixel","putImageData","fillStyle","getLineColor","fillRect","lineWidth","beginPath","moveTo","xTemp","yTemp","lineTo","strokeStyle","stroke","closePath","clearRect","bgColor","solid","drawLines","drawDotsImageData","drawDots","setEquations","draw","oscillatorY","xModDepth","oscillatorX","yModDepth","len","lineColor","resolution","onClick","values","remove","cacheValue","MainCanvas","on","LogSlider","minpos","maxpos","minval","maxval","minlval","maxlval","scale","exp","init","mainCanvasID","refreshParams","pathname","indexOf","downloader"],"mappings":"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","file":"scripts.js","sourcesContent":["// HELPER FUNCTIONS\n// ================\nvar mainCanvas;\n\nconst id = x => x;\n\nconst roundN = decimals => {\n  return val => {\n    if (isNaN(val)) return val;\n    try {\n      return Math.round(val * Math.pow(10, decimals)) / Math.pow(10, decimals);\n    } catch (e) {\n      return val;\n    }\n  };\n};\n\nconst round2 = roundN(2);\n\nconst round3 = roundN(3);\n\nfunction toHex(value) {\n  if (value > 255 || value < 0) {\n    throw new Error('Please use an 8-bit value');\n  }\n  return Math.round(value).toString(16);\n}\n\n/**\n * Convert numeric value to an rgb hue\n *\n * There are six phases that describe the RGB range of hues.\n * All changes occur from a set \"min\" to a set \"max\" based on the desired saturation\n * 1. Blue increases\n * 2. Red decreases\n * 3. Green increases\n * 4. Blue decreases\n * 5. Red increases\n * 6. Green decreases\n * These phases can be approximated with a clipped sin function offset to different sections of its period\n *\n * @param {number} n must satisfy: nMin <= n <= nMax\n * @returns {any} rgb(num,num,num) | #HHHHHH | [num, num, num]\n */\nfunction valToRGBFactory(nMax = 100, nMin = 0, {\n  fixEdges = false, // show black @ nMin and white @ nMax\n  returnHex = false, // return 6-digit hex value in form #000000\n  returnChannels = false // returns an array of the raw r, g, b values\n} = {}) {\n  return function (n) {\n    if (n < nMin || n > nMax) {\n      throw new Error(\"n must satisfy \" + nMin + \" <= n <= \" + nMax);\n    }\n    if (fixEdges) {\n      if (n == nMax) {\n        return \"#FFFFFF\";\n      }\n      if (n == nMin) {\n        return \"#000000\";\n      }\n    }\n    var n6th = (nMax - nMin) / 6;\n    var n12th = n6th / 2;\n\n    // set min/max based on desired saturation\n    var min = 90;\n    var max = 212;\n    var range = max - min;\n    var period = offset => (2 * Math.PI * offset) / nMax;\n    var clip = x => (x < min ? min : x > max ? max : x);\n    var rangeAdjust = x => x * range + min + range / 2;\n    var channel = offset => x =>\n      clip(rangeAdjust(Math.sin(x * period(1) + period(offset))));\n    // the offset math is a bit opaque to me, but it works\n    var r = channel(n6th * 2 - n12th);\n    var g = channel(n6th * 6 - n12th);\n    var b = channel(n6th * 4 - n12th);\n\n    if (returnHex) {\n      return `#${toHex(r(n))}${toHex(g(n))}${toHex(b(n))}`;\n    }\n    if (returnChannels) {\n      return [r(n), g(n), b(n)];\n    }\n\n    return `rgb(${r(n)},${g(n)},${b(n)})`;\n  };\n}\n\n/**\n * \n * @param {string} color must be a hex value\n */\nfunction fixedColorFactory(color) {\n  return (_, __, {returnChannels = false} = {}) => {\n    return () => {\n      if (returnChannels) {\n        if (color.slice(1, 2) === \"F\") {\n          return [255, 255, 255];\n        }\n        return [0, 0, 0];\n      }\n      return color;\n    }\n  }\n}\n\nfunction download(e) {\n  e.target.download = \"image.png\";\n  e.target.href = document\n    .getElementById(\"mainCanvas\")\n    .toDataURL(\"image/png\")\n    .replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n}\n\nfunction refresh(params) {\n  return () => {\n    document.querySelectorAll(\".sidebar__thumb\").forEach((el, i) => {\n      new Thumbnail(el.id).setParams(params).update();\n    });\n  };\n}\n\nfunction toggleSidebar(e) {\n  document.getElementById('sidebar').classList.toggle('collapsed');\n  document.getElementById('sidebar').classList.toggle('expanded');\n}\n\nfunction toggleNextBlock(e) {\n  var listener = e.currentTarget;\n  listener.parentElement.classList.toggle('is-expanded');\n}\n\n// credit: https://github.com/jashkenas/underscore/blob/ae037f7c41323807ae6f1533c45512e6d31a1574/underscore.js#L842-L881\nfunction throttle(func, wait, options = {}) {\n  var timeout, context, args, result;\n  var previous = 0;\n\n  var later = function() {\n    previous = options.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function() {\n    var now = Date.now();\n    if (!previous && options.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n\n  throttled.cancel = function() {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}\n\nfunction loadParams() {\n  const params = new URL(window.location).searchParams;\n  for (let [key, value] of params) {\n    // TODO: should probably expose a better API than accessing mainCanvas.params directly\n    value = key === 'bgColor' ? value : Number(value);\n    mainCanvas.params[key].setValue(value);\n  }\n}\n\nfunction getShareURL() {\n  // set URL and delete any existing params\n  const baseURL = new URL(window.location);\n  for (let [key, value] of baseURL.searchParams) {\n    baseURL.searchParams.delete(key);\n  }\n  // get new params and append to baseURL searchParams\n  const params = mainCanvas.params;\n  Object.keys(params).forEach(param => {\n    baseURL.searchParams.append(param, round2(params[param].rawValue));\n  });\n  // display result to user\n  prompt(\"Copy this URL and send it to someone awesome\", baseURL.toString());\n}\n\n\n// COLLECTIONS FOR OPTIONPARAMETERS\n// ================\n\n// keeping for possible future experimentation\nvar oldOscillators = [\n  t => (Math.cos(t) + 1) / 2,\n  t => Math.cos(Math.pow(t, 0.35)),\n  t => (Math.sin(Math.cos(t) * Math.sin(t))) * 2,\n];\n\n// values must be functions that return a number\nvar oscillatorsX = [{\n    id: \"osc0\",\n    value: t => Math.sin(t),\n    display: \"sine\"\n  },\n  {\n    id: \"osc1\",\n    value: t => Math.cos(t),\n    display: \"cosine\"\n  },\n  {\n    id: \"osc2\",\n    value: t => (Math.sin(t) + 1) / 2,\n    display: \"half-sine\"\n  },\n  {\n    id: \"osc3\",\n    value: t => Math.sin(t) * Math.pow(t, -0.35),\n    display: \"collapse\"\n  },\n  {\n    // based on https://en.wikipedia.org/wiki/Trochoid\n    id: \"osc4\",\n    value: t => {\n      var a = 0.5;\n      var b = 0.5;\n      return a - b * Math.sin(t);\n    },\n    display: \"trochoid\"\n  },\n  {\n    id: \"osc5\",\n    // based on: https://en.wikipedia.org/wiki/Epicycloid\n    value: t => {\n      var r = 0.2;\n      var k = 3; // number of cusps\n      // var R = k * r;\n      // supposedly either of these two functions should work\n      // return ( (r + R)*Math.cos(t) - r*Math.cos((r + R) / r * t) )\n      return r * (k + 1) * Math.cos(t) - r * Math.cos((k + 1) * t);\n    },\n    display: \"epicycloid\"\n  },\n  {\n    id: \"osc6\",\n    value: t => Math.sin(Math.cos(Math.log10(t))),\n    display: \"log periodic\"\n  },\n  {\n    id: \"osc7\",\n    value: t => Math.abs(Math.sin(t / 10)),\n    display: \"absolute\"\n  },\n  {\n    id: \"osc8\",\n    value: t => {\n      var start = Math.sin(t);\n      if (start > 0.5) {\n        return start;\n      }\n      return start / -3;\n    },\n    display: \"experimental!\"\n  }\n];\n\nvar oscillatorsY = [{\n    id: \"osc10\",\n    value: t => Math.sin(t),\n    display: \"sine\"\n  },\n  {\n    id: \"osc11\",\n    value: t => Math.cos(t),\n    display: \"cosine\"\n  },\n  {\n    id: \"osc12\",\n    value: t => (Math.sin(t) + 1) / 2,\n    display: \"half-sine\"\n  },\n  {\n    id: \"osc13\",\n    value: t => Math.sin(t) * Math.pow(t, -0.35),\n    display: \"collapse\"\n  },\n  {\n    // based on https://en.wikipedia.org/wiki/Trochoid\n    id: \"osc14\",\n    value: t => {\n      var a = 0.5;\n      var b = 0.5;\n      return a - b * Math.cos(t);\n    },\n    display: \"trochoid\"\n  },\n  {\n    id: \"osc15\",\n    // based on: https://en.wikipedia.org/wiki/Epicycloid\n    value: t => {\n      var r = 0.2;\n      var k = 3; // number of cusps\n      return r * (k + 1) * Math.sin(t) - r * Math.sin((k + 1) * t);\n    },\n    display: \"epicycloid\"\n  },\n  {\n    id: \"osc16\",\n    value: t => Math.sin(Math.cos(Math.log10(t))),\n    display: \"log periodic\"\n  },\n  {\n    id: \"osc17\",\n    value: t => Math.abs(Math.sin(t / 10)),\n    display: \"absolute\"\n  },\n  {\n    id: \"osc18\",\n    value: t => {\n      var start = Math.sin(t);\n      if (start > 0.5) {\n        return start;\n      }\n      return start / -3;\n    },\n    display: \"experimental!\"\n  }];\n\n// values must be functions that return functions that return a color\nvar lineColors = [{\n    id: \"colorize\",\n    value: valToRGBFactory,\n    display: \"colorize\"\n  },\n\n  {\n    id: \"white\",\n    value: fixedColorFactory(\"#FFFFFF\"),\n    display: \"white\"\n  },\n  {\n    id: \"black\",\n    value: fixedColorFactory(\"#000000\"),\n    display: \"black\"\n  }\n];\n\n// PARAMETERS\n// ================\n\n/**\n * Parameters control all the variables used in the Drawings to generate an image\n * Different kinds of parameters manage their data differently, but they share a common interface:\n *   this.controls is an array of controls that affect the parameter\n *   this.controlValue is an element to display the current value to the end user\n *   this.rawValue correlates to the current value in this.controls\n *   this.value is managed internally and correlates to the actual value used in the Drawing\n */\nclass Parameter {\n  constructor(param, ids, rawValueType) {\n    this.rawValueType = rawValueType;\n    this.events = {};\n    this.controls = ids.map(id => document.getElementById(id));\n    try {\n      this.controlValue = document.getElementById(`${param}-value`);\n    } catch (e) {\n      this.controlValue = null;\n    }\n    return this;\n  }\n\n  chance() {\n    return Math.random() > 0.5;\n  }\n\n  addEventListeners() {\n    this.controls.forEach(control => {\n      control.addEventListener(\"input\", throttle(this.onInput.bind(this), 125));\n    });\n    return this;\n  }\n\n  on(eventName, callback) {\n    this.events[eventName] = callback;\n    return this;\n  }\n\n  emit(eventName, data) {\n    this.events[eventName](data);\n    return this;\n  }\n\n  onInput(e) {\n    this.rawValue = this.rawValueType === 'number' ? Number(e.target.value) : e.target.value;\n    this.update(this.rawValue);\n    return this;\n  }\n\n  updateDisplay(value) {\n    if (this.controlValue) {\n      this.controlValue.innerText = value;\n    }\n    return this;\n  }\n\n  setValue(value) {\n    this.rawValue = value;\n    this.update(this.rawValue, false);\n    if (this.setAttributes) this.setAttributes();\n    return this;\n  }\n}\n\nclass SliderParameter extends Parameter {\n  // TODO: document transformer - purpose and implementation\n  constructor(\n    param, {\n      min,\n      max,\n      step,\n      transformer = {\n        value: id,\n        position: id\n      },\n      generateIntegers = false,\n      generate1 = false,\n      animationController = false,\n      animationStep\n    } = {}\n  ) {\n    super(param, [param], 'number');\n    this.param = param;\n    this.max = max;\n    this.min = min;\n    this.step = step;\n    this.transformer = transformer;\n    this.generateIntegers = generateIntegers;\n    this.generate1 = generate1;\n    if (animationController) {\n      const animationContainer = document.getElementById(animationController);\n      this.animation = {\n        isActive: false,\n        isIncrementing: true,\n        now: Date.now(),\n        lastRun: Date.now(),\n        fps: 1000 / 30,\n        step: animationStep || (this.max - this.min) / 50000,\n        controller: {\n          run: animationContainer.querySelector('.animation-run-toggle'),\n          direction: animationContainer.querySelector('.animation-direction-toggle'),\n          step: animationContainer.querySelector('.animation-step')\n        }\n      };\n      this.animate = this.animate.bind(this);\n      this.animation.controller.run.addEventListener('input', this.toggleAnimation.bind(this));\n      this.animation.controller.direction.addEventListener('click', this.toggleAnimationDirection.bind(this));\n      this.animation.controller.step.addEventListener('input', throttle(this.updateAnimationStep.bind(this), 150));\n      this.animation.controller.step.setAttribute('max', this.animation.step * 50);\n      this.animation.controller.step.setAttribute('min', this.animation.step / 10);\n      this.animation.controller.step.setAttribute('step', this.animation.step);\n      this.animation.controller.step.setAttribute('value', this.animation.step);\n    }\n\n    this.generate()\n      .addEventListeners()\n      .setAttributes()\n      .updateDisplay(round2(this.value));\n    return this;\n  }\n\n  setAttributes() {\n    this.controls[0].setAttribute(\"value\", this.rawValue);\n    this.controls[0].setAttribute(\"step\", this.step);\n    this.controls[0].setAttribute(\"max\", this.max);\n    this.controls[0].setAttribute(\"min\", this.min);\n    return this;\n  }\n\n  update(value, emit = true) {\n    this.value = this.transformer.value(Number(value));\n    this.updateDisplay(round2(this.value));\n    if (emit) {\n      this.emit(\"update\");\n    }\n    return this;\n  }\n\n  generate() {\n    if (this.generateIntegers) {\n      // have to call this.transformer.position here because this is\n      // what we want the final result to be;\n      // internally, this.value is stored as the transformed value\n      var generated = this.transformer.position(\n        Math.pow(\n          // Math.ceil(Math.random() * 10) + (this.chance() ? 1 : -1) * Math.random() / 20, // base\n          Math.ceil(Math.random() * 10) + (this.chance() ? 0.01 : -0.01), // base\n          this.chance() ? -1 : 1 // exponent\n        )\n      );\n    } else if (this.generate1) {\n      var generated = 1;\n    } else {\n      var generated = Math.random() * (this.max - this.min) + this.min;\n    }\n    this.rawValue = generated;\n    this.value = this.transformer.value(this.rawValue);\n    return this;\n  }\n\n  toggleAnimation() {\n    this.animation.isActive = !this.animation.isActive;\n    this.animate();\n  }\n\n  // TODO: babel isn't transforming async correctly...?\n  // these don't need to be handled synchronously - effects are non-critical\n  toggleAnimationDirection() {\n  // async toggleAnimationDirection() {\n    this.animation.isIncrementing = !this.animation.isIncrementing;\n  }\n\n  updateAnimationStep(e) {\n  // async updateAnimationStep(e) {\n    this.animation.step = Number(e.target.value);\n  }\n\n  animate() {\n    if (this.animation.isActive) {\n      // has enough time elapsed to update?\n      this.animation.now = Date.now();\n      this.animation.elapsed = this.animation.now - this.animation.lastRun;\n\n      // if more time has elapsed than our desired framerate, then draw\n      if (this.animation.elapsed > this.animation.fps) {\n        // are we incrementing or decrementing?\n        if (this.animation.isIncrementing && this.rawValue >= this.max) {\n          this.animation.isIncrementing = false;\n        } else if (!this.animation.isIncrementing && this.rawValue <= this.min) {\n          this.animation.isIncrementing = true;\n        }\n        this.rawValue = this.animation.isIncrementing ? this.rawValue + this.animation.step : this.rawValue - this.animation.step;\n        this.update(this.rawValue).setAttributes();\n\n        // set \"last run\" to \"now\" minus any additional time that elapsed beyond the desired frame rate\n        this.animation.lastRun = this.animation.now - (this.animation.elapsed % this.animation.fps);\n      }\n      requestAnimationFrame(this.animate);\n    }\n  }\n}\n\nclass OptionsParameter extends Parameter {\n  /**\n   * @param {string} param\n   * @param {{id: string, value: function, display: string}[]} options\n   */\n  constructor(param, options) {\n    super(param, options.map(o => o.id), 'number');\n    this.param = param;\n    this.options = options;\n    this.generate()\n      .addEventListeners()\n      .setAttributes()\n      .updateDisplay(this.option.display);\n    return this;\n  }\n\n  setAttributes() {\n    this.options.forEach((option, i) => {\n      const el = document.getElementById(option.id);\n      el.dataset.display = option.display;\n      el.value = i;\n    });\n    return this;\n  }\n\n  update(value, emit = true) {\n    this.option = this.options[value];\n    this.value = this.option.value;\n    this.updateDisplay.call(this, this.option.display);\n    if (emit) {\n      this.emit(\"update\");\n    }\n    return this;\n  }\n\n  updateDisplay(value) {\n    document.getElementById(this.option.id).checked = \"checked\";\n    this.controlValue.innerText = value;\n    return this;\n  }\n\n  generate() {\n    const generated = Math.floor(Math.random() * this.options.length);\n    this.rawValue = generated;\n    this.option = this.options[generated];\n    this.value = this.option.value;\n    return this;\n  }\n}\n\nclass BooleanParameter extends Parameter {\n  constructor(param) {\n    super(param, [param]);\n    this.param = param;\n    this.generate()\n      .addEventListeners()\n      .updateDisplay(this.value);\n    return this;\n  }\n\n  onInput(e) {\n    this.rawValue = e.target.checked;\n    this.update(this.rawValue);\n    return this;\n  }\n\n  update(value, emit = true) {\n    this.value = Boolean(value);\n    this.updateDisplay(this.value);\n    if (emit) {\n      this.emit(\"update\");\n    }\n    return this;\n  }\n\n  updateDisplay(checked) {\n    this.controls[0].checked = checked;\n    return this;\n  }\n\n  generate() {\n    this.rawValue = this.value = this.chance();\n    return this;\n  }\n}\n\nclass ColorParameter extends Parameter {\n  constructor(param) {\n    super(param, [param]);\n    this.param = param;\n    this.generate()\n      .addEventListeners()\n      .setAttributes()\n      .updateDisplay(this.value);\n    return this;\n  }\n\n  setAttributes() {\n    this.controls[0].setAttribute(\"value\", this.rawValue);\n    return this;\n  }\n\n  update(value, emit = true) {\n    this.value = value;\n    if (emit) {\n      this.emit(\"update\");\n    }\n    return this;\n  }\n\n  generate() {\n    this.rawValue = this.value = this.chance() ?\n      \"#000000\" :\n      valToRGBFactory(100, 0, {\n        returnHex: true\n      })(Math.random() * 100);\n    return this;\n  }\n}\n\n// DRAWINGS\n// ================\n\nclass Drawing {\n  constructor(canvasID) {\n    this.canvas = document.getElementById(canvasID);\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.params = {};\n    this.radius = Math.max(this.canvas.width, this.canvas.height) / 2.1;\n    this.offsetPoint = val => val + this.canvas.width / 2;\n\n    // TODO: figure out best way to apply lineWidth to pixels drawnn on imageData\n    this.useImageData = false;\n    this.imageData = this.ctx.createImageData(this.canvas.width, this.canvas.height);\n    // this.canvas.addEventListener('mousemove', this.logDataOnHover.bind(this));\n\n    return this;\n  }\n\n  // currently not used, but could be useful for debugging\n  logDataOnHover(event) {\n    var x = event.layerX;\n    var y = event.layerY;\n    var pixel = this.ctx.getImageData(x, y, 1, 1);\n    var data = pixel.data;\n    var rgba1 = 'rgba(' + data[0] + ', ' + data[1] +\n               ', ' + data[2] + ', ' + data[3] + ')';\n    console.log(rgba1);\n  }\n  \n  drawPixel(x, y, r, g, b, a) {\n    // if x and y are not rounded this returns very inaccurate results (why?)\n    var index = (Math.round(y) * this.canvas.width + Math.round(x)) * 4;\n    this.imageData.data[index + 0] = r;\n    this.imageData.data[index + 1] = g;\n    this.imageData.data[index + 2] = b;\n    this.imageData.data[index + 3] = a;\n  }\n\n  drawDotsImageData() {\n    // get imageData here to capture background color;\n    this.imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n    for (let t = 0; t <= this.max; t += this.increment) {\n      var x = this.xScale(t);\n      var y = this.yScale(t);\n      var [r, g, b] = this.getPixelColor(t);\n      this.drawPixel(x, y, r, g, b, 255);\n    }\n    this.ctx.putImageData(this.imageData, 0, 0);\n    return this;\n  }\n\n  drawDots() {\n    for (let t = 0; t <= this.max; t += this.increment) {\n      var x = this.xScale(t) /*  * osc(i / xModDepth) */ ;\n      var y = this.yScale(t) /*  * osc(i / yModDepth) */ ;\n      this.ctx.fillStyle = this.getLineColor(t);\n      this.ctx.fillRect(x, y, this.lineWidth, this.lineWidth);\n    }\n    return this;\n  }\n\n  drawLines() {\n    this.ctx.lineWidth = this.lineWidth;\n    for (let t = 0; t <= this.max; t += this.increment) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.x, this.y);\n      var xTemp = this.xScale(t);\n      var yTemp = this.yScale(t);\n      this.ctx.lineTo(xTemp, yTemp);\n      this.ctx.strokeStyle = this.getLineColor(t);\n      this.ctx.stroke();\n      this.ctx.closePath();\n      this.x = xTemp;\n      this.y = yTemp;\n    }\n    return this;\n  }\n\n  draw() {\n    // clear any previous canvas data and fill bg white\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.fillStyle = this.params.bgColor.value;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    // set defaults\n    this.ctx.strokeStyle = this.getLineColor(0);\n    this.ctx.fillStyle = this.getLineColor(0);\n\n    if (this.params.solid.value) {\n      this.x = this.xScale(0);\n      this.y = this.yScale(0);\n      return this.drawLines();\n    } else if (this.useImageData) {\n      return this.drawDotsImageData();\n    } else {\n      return this.drawDots();\n    }\n  }\n\n  update() {\n    this.setEquations().draw();\n  }\n\n  /**\n   * Set drawing functions\n   * Must set params before calling\n   */\n  setEquations() {\n    this.xScale = t =>\n      this.offsetPoint(\n        Math.sin(t) *\n        this.radius *\n        this.params.oscillatorY.value(t * this.params.xModDepth.value)\n      );\n    this.yScale = t =>\n      this.offsetPoint(\n        Math.cos(t) *\n        this.radius *\n        this.params.oscillatorX.value(t * this.params.yModDepth.value)\n      );\n    this.max = Math.PI * this.params.len.value;\n    this.getLineColor = this.params.lineColor.value(this.max, 0);\n    // pixelColor is used when drawing with imageData because individual channels are required\n    // could consider refactoring the factory to return channels by default and then transform as needed\n    this.getPixelColor = this.params.lineColor.value(this.max, 0, { returnChannels: true });\n    this.lineWidth = this.params.width.value;\n    this.increment = 1 / this.params.resolution.value;\n    return this;\n  }\n}\n\nclass Thumbnail extends Drawing {\n  constructor(canvasID) {\n    super(canvasID);\n    this.canvas.addEventListener(\"click\", this.onClick.bind(this));\n    this.values = {};\n  }\n\n  onClick(e) {\n    document.getElementById('mainCanvasControls').classList.remove('hide');\n    Object.values(this.params).forEach(param => {\n      param.setValue(this.values[param.param]);\n    });\n    mainCanvas.setParams(this.params).update();\n  }\n\n  /**\n   * @param {string} param\n   * @param {any} value\n   */\n  cacheValue(param, value) {\n    this.values[param] = value;\n  }\n\n  /**\n   * @param {Object} params\n   */\n  setParams(params) {\n    Object.values(params).forEach(param => {\n      param.generate();\n      this.cacheValue(param.param, param.rawValue);\n    });\n    this.params = params;\n    return this;\n  }\n}\n\nclass MainCanvas extends Drawing {\n  constructor(canvasID) {\n    super(canvasID);\n  }\n\n  /**\n   * @param {Object} params\n   */\n  setParams(params) {\n    Object.values(params).forEach(param => {\n      param.on(\"update\", this.update.bind(this));\n    });\n    this.params = params;\n    return this;\n  }\n}\n\n// TRANSFORMERS\n// ================\n\n// credit: https://stackoverflow.com/a/846249\nclass LogSlider {\n  constructor({\n    minpos = 1,\n    maxpos = 10,\n    minval = 0.1,\n    maxval = 100\n  } = {}) {\n    this.minpos = minpos;\n    this.maxpos = maxpos;\n    this.minlval = Math.log(minval);\n    this.maxlval = Math.log(maxval);\n    this.scale = (this.maxlval - this.minlval) / (this.maxpos - this.minpos);\n  }\n\n  value(position) {\n    // return round2(Math.exp((position - this.minpos) * this.scale + this.minlval));\n    return round3(\n      Math.exp((position - this.minpos) * this.scale + this.minlval)\n    );\n  }\n  // Calculate slider position from a value\n  position(value) {\n    // return round2(this.minpos + (Math.log(value) - this.minlval) / this.scale);\n    return round3(this.minpos + (Math.log(value) - this.minlval) / this.scale);\n  }\n}\n\n// INITIALIZATION\n// ==============\n\n(function init() {\n  var mainCanvasID = \"mainCanvas\";\n\n  var params = {\n    solid: new BooleanParameter(\"solid\"),\n    resolution: new SliderParameter(\"resolution\", {\n      min: 20,\n      max: 100,\n      step: 0.1,\n      animationController: 'resolution-animate',\n      animationStep: 1 / 5000\n    }),\n    len: new SliderParameter(\"len\", {\n      min: 1,\n      max: 60,\n      step: 0.1,\n      animationController: 'len-animate',\n      animationStep: 1 / 1000\n    }),\n    width: new SliderParameter(\"width\", {\n      min: 1,\n      max: 10,\n      step: 0.1,\n      generate1: true,\n      animationController: 'width-animate',\n      animationStep: 1 / 1000\n    }),\n    xModDepth: new SliderParameter(\"xModDepth\", {\n      min: 1,\n      max: 10,\n      step: 0.01,\n      transformer: new LogSlider(),\n      generateIntegers: true,\n      animationController: 'xModDepth-animate',\n      animationStep: 1 / 10000\n    }),\n    yModDepth: new SliderParameter(\"yModDepth\", {\n      min: 1,\n      max: 10,\n      step: 0.01,\n      transformer: new LogSlider(),\n      generateIntegers: true,\n      animationController: 'yModDepth-animate',\n      animationStep: 1 / 10000\n    }),\n    lineColor: new OptionsParameter(\"lineColor\", lineColors),\n    oscillatorX: new OptionsParameter(\"oscillatorX\", oscillatorsX),\n    oscillatorY: new OptionsParameter(\"oscillatorY\", oscillatorsY),\n    bgColor: new ColorParameter(\"bgColor\")\n  };\n\n  // instantiate main canvas\n  // mainCanvas = new MainCanvas(mainCanvasID);\n  // Use this if you want MainCanvas to load by default\n  mainCanvas = new MainCanvas(mainCanvasID).setParams(params).setEquations().draw();\n  document.getElementById('mainCanvasControls').classList.remove('hide');\n  loadParams();\n  mainCanvas.setParams(params).update();\n\n  // generate thumbnails\n  var refreshParams = refresh(params);\n  document.getElementById(\"refresh\").addEventListener(\"click\", refreshParams);\n  if (window.location.pathname.indexOf(\"full\") > -1) {\n    refreshParams();\n  }\n  \n  // add toggle functionality\n  document.querySelectorAll('.toggler').forEach(function(el) {\n    el.addEventListener('click', toggleNextBlock);\n  })\n\n  document.getElementById('close-sidebar').addEventListener('click', toggleSidebar);\n  document.getElementById('open-sidebar').addEventListener('click', toggleSidebar);\n\n  // enable downloading image\n  const downloader = document.getElementById(\"downloadBtn\");\n  downloader.addEventListener(\"click\", download);\n\n  document.getElementById(\"shareBtn\").addEventListener(\"click\", getShareURL);\n})();"]}